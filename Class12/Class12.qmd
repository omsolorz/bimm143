---
title: "Class 12"
author: "Olivia Solorzano Alvarez"
format: pdf
editor: visual
---

```{r}
library(DESeq2)
```

# Import their data

We need twp things for this analysis: 

- **counts** (counts for every transcript/gene in each experiment)
- **metadata** (metadata that describes the experimental setup)

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

```

```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


>Q2. How many ‘control’ cell lines do we have? 

```{r}
table( metadata$dex )
```

```{r}
sum( metadata$dex=="control" )
```


Step 1
Calculate the mean of the control samples (i.e. columns in `counts`)

(a) We need to find which columns in `counts` are "control" samples.
    - look in the metadata (a.k.a. `metadata`), $dex column

```{r}
control.inds <- metadata$dex == "control"
```

(b) Extract all the control columns from `counts` and call it `control.counts`

```{r}
control.counts <- counts[,control.inds]
```

(c) Calculate the mean value across the rows of `control.counts` i.e. calculat ethe mean count values fro each gene in the control samples

```{r}
control.means <- rowMeans( control.counts )
head(control.means)
```

> Q4. 

- Step 2.
Calculate the mean of the treated samples...

```{r}
# Extract treated data columns (displayed as logicals)
treated.inds <- metadata$dex == "treated"

# Count logicals that display TRUE for treated"
treated.counts <- counts[,treated.inds]

# Calculate mean of each gene (row) that is classified as treated
treated.means <- rowMeans( treated.counts )
head(treated.means)
```


We now have conttrol and treated mean count values. For ease of book-kepping I will combine these vectors into a data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

`geom_point`

> Q6. 

```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log="xy")
```

We use log transforms for skewed data such as this and because we really care most about relative changes in magnitude. 

We must often use log2 as our transform as the math is easier to interprt than log10 or others. 

If we have no change - i.e. same values in control and treated we will have a log2 vaue of zero

```{r}
log2(20/20)
```

If I have double the amount ie.e 20 compared to 10 for example I will have a log2 value of 1.
```{r}
log2(20/10)
```

If ia have half the amount I iwll have a log2 fold-change of -1
```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

```{r}
meancounts$log2fc <- log2(meancounts$treated.means / meancounts$control.means)
head(meancounts)
```

> Q. How many genes are up regulated at the common threshold of +2 log2FC


```{r}
sum(meancounts$log2fc >= 2, na.rm=TRUE)
```

Hold on what about the stats! Yes, these are big changes, but are these changes significant!

To do this properly we will turn to the DESeq2 package. 

#DESeq2 analysis

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need our inout contData and colData in a specific format that DESeq wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```
To run the analysis I can now use the main DESeq2 function called `DESeq()` with `dds` as input
```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

Let's make a final (for today) plot of log2 fold-change vs the adjusted P-value.

```{r}
plot( res$log2FoldChange, res$padj)
```

It is the low P-values that we care about and these are lost in the skewed plot above. Let's take the log of the $padj values for our plot

```{r}
plot( res$log2FoldChange, -log(res$padj))
abline(v=c(+2,-2), col="blue")
abline(h=-log(0.05), col="blue")
```

Finally we can make a color vector to use in the plot to better highlight the genes we care about.
```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 
mycols[res$padj > 0.05] <- "gray"

plot( res$log2FoldChange,  -log(res$padj), col=mycols)
abline(v=c(+2,-2), col="blue")
abline(h=-log(0.05), col="blue")
```

Done for today :-)


Still to do: 
1. Add annotation (including gene symbols, etrezid, and genoname)
2. Save results as CSV file.
3. Do same Pathway Analysis (KEGG and GO)


## Adding annotation data

We can use the AnnotationDbi package to add annotation data such as gene identifiers frm different souirces to our results object.
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

We can translate (a.k.a. map) between all database formats:
```{r}
columns(org.Hs.eg.db)
```

My IDs are stored as the rownames of `res`
```{r}
head( rownames(res) )
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),      # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",         # The new format we want to add
                     multiVals="first")
```



```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),      # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",        # The new format we want to add
                     multiVals="first")
```

## Save our results to date

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway analysis

We can use the KEGG database of biological oathgways to get some more insight into our differentially expressed genes and the kinds of biology that are involved in.

```{r}
library(gage)
library(gageData)
library(pathview)
```


Look at the first two KEGG pathways
```{r}

data(kegg.sets.hs)

#examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```


Make a new vector of fold-change
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
x <- 1:3
x
```

```{r}
names(x) <- c("chandra", "lisa", "xinqiu")
x
```


```{r}
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less, 3)
```

```{r}
attributes(keggres$less)
```


Now I can use the **KEGG IDs** ("hsa5310" etc.) of these pathways from gage to view our genes mapped to these pathways. 
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```


![Asthma pathway from KEGG with our genes shown in color](hsa04110.pathview.png)