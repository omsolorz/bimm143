---
title: "Class07: Clustering and PCA"
author: "Olivia"
format: pdf
editor: visual
---

# Clustering

First let's make up some data to cluster so we can get a fell for these methods and how to work with them. 

We can use the`rnorm()` function to get random numbers from a normal distribution at around a given `mean`.
```{r}
hist( rnorm(5000, mean=3) )
```

Let's get 30 points with a mean of 3
```{r}
tmp <- c( rnorm(30, mean=3), rnorm(30, mean=-3) )
tmp
```


Put two of these together
```{r}
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```


## K-means clustering.

Very popular cluestering method that we can use with the `kmeans()` function in base R.

```{r}
km <- kmeans(x, centers = 2)
km
```
 

> Q. 
How many points are in each cluster?

```{r}
km$size
```


> Q.  cluster assignment/membership is 

```{r}
km$cluster
```


> Q. cluster center is

```{r}
km$centers
```

> Q. Plot x colored by the means cluster assignment and add cluster centers as blue points

```{r}
plot(x, col=km$cluster)
points(km$centers, col="blue", pch=15, cex=3)
```


> Q. Let's cluster into 3 groups for same `x` data and make a plot. 

```{r}
km <- kmeans(x, centers = 3)
plot(x, col=km$cluster)
```

# Hierarchical Clustering

We can use the `hclust()` function for Hierarchical Clustering.
Unlike `kmeans()`, where we could just pass in our data as input, we need to give  `hclust` a "distance matrix."


We will use the `dist()` function to start with.

```{r}
d <- dist(x)
hc <- hclust(d)
hc
```

```{r}
plot(hc)
```

I can now "cut" my tree with the `cutree()`to yield a culster membership vector.

```{r}
cutree(hc, h=8)
```

You can also tell `cutree` to cut where it yields "k" groups.

```{r}
grps <- cutree(hc, k=2)
grps
```

```{r}
plot(x, col=grps)
```

# Principal Component Analysis (PCA)


New low dimensional acis (or surfaces) closest to the observations. Can be compared to best-fit lines.
PC1 goes from left to right
PC2 goes from up to down

**Class 7**

Data import
```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```


> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
#number of rows = 17
nrow(x)

#number of colummns = 5
ncol(x)

#number of rows and columns
dim(x)

```


Examining data
```{r}
head(x)
tail(x)

x <- read.csv(url, row.names=1)
head(x)
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer using `x <- read.csv(url, row.names=1)
head(x)` because it doesn't mix up the amount of rows and columns.

Exploratory analysis
```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```


>Q3: Changing what optional argument in the above barplot() function results in the following plot?

Changing argument `beside=T` to `beside=F`
```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```


> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```
The x-axis and y-axis changes depending on the plot that is being examined. If a point lies in the diagonal for a given plot, it means that one of the countries eats more or less of one of the foods than the other. 


>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

Ireland seems to differ on the amount of food corresponding by the blue and orange data points since these are further from the other points.


The main PCA function in base R is called prcomp() it expects the transpose of our data.

```{r}
pca <- prcomp( t(x) )
summary(pca)
```


>Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
```


>Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500), col=c("orange", "red", "blue", "darkgreen"))

```






